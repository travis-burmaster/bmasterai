apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "bmasterai.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "bmasterai.labels" . | nindent 4 }}
  {{- with .Values.deploymentAnnotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "bmasterai.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
        checksum/secret: {{ include (print $.Template.BasePath "/secret.yaml") . | sha256sum }}
        {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      labels:
        {{- include "bmasterai.selectorLabels" . | nindent 8 }}
        {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- with .Values.global.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "bmasterai.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.global.imageRegistry }}{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.service.targetPort }}
              protocol: TCP
          env:
            # Pod information
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: SERVICE_ACCOUNT
              valueFrom:
                fieldRef:
                  fieldPath: spec.serviceAccountName
            # BMasterAI configuration
            - name: BMASTERAI_CONFIG_FILE
              value: "/app/config/config.yaml"
            - name: BMASTERAI_ENV
              value: "production"
            # Secrets
            {{- if .Values.secrets.openaiApiKey }}
            - name: OPENAI_API_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ include "bmasterai.fullname" . }}-secrets
                  key: OPENAI_API_KEY
            {{- end }}
            {{- if .Values.secrets.anthropicApiKey }}
            - name: ANTHROPIC_API_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ include "bmasterai.fullname" . }}-secrets
                  key: ANTHROPIC_API_KEY
            {{- end }}
            {{- if .Values.secrets.slackWebhookUrl }}
            - name: SLACK_WEBHOOK_URL
              valueFrom:
                secretKeyRef:
                  name: {{ include "bmasterai.fullname" . }}-secrets
                  key: SLACK_WEBHOOK_URL
            {{- end }}
            {{- if .Values.secrets.emailUsername }}
            - name: EMAIL_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ include "bmasterai.fullname" . }}-secrets
                  key: EMAIL_USERNAME
            {{- end }}
            {{- if .Values.secrets.emailPassword }}
            - name: EMAIL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "bmasterai.fullname" . }}-secrets
                  key: EMAIL_PASSWORD
            {{- end }}
            {{- if .Values.secrets.smtpServer }}
            - name: SMTP_SERVER
              valueFrom:
                secretKeyRef:
                  name: {{ include "bmasterai.fullname" . }}-secrets
                  key: SMTP_SERVER
            {{- end }}
            {{- if .Values.secrets.qdrantUrl }}
            - name: QDRANT_URL
              valueFrom:
                secretKeyRef:
                  name: {{ include "bmasterai.fullname" . }}-secrets
                  key: QDRANT_URL
            {{- end }}
            {{- if .Values.secrets.qdrantApiKey }}
            - name: QDRANT_API_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ include "bmasterai.fullname" . }}-secrets
                  key: QDRANT_API_KEY
            {{- end }}
            {{- with .Values.extraEnvVars }}
            {{- toYaml . | nindent 12 }}
            {{- end }}
          {{- with .Values.extraEnvVarsFrom }}
          envFrom:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          volumeMounts:
            - name: config-volume
              mountPath: /app/config
              readOnly: true
            {{- if .Values.persistence.data.enabled }}
            - name: data-volume
              mountPath: /app/data
            {{- end }}
            {{- if .Values.persistence.logs.enabled }}
            - name: logs-volume
              mountPath: /app/logs
            {{- end }}
            {{- with .Values.extraVolumeMounts }}
            {{- toYaml . | nindent 12 }}
            {{- end }}
          {{- if .Values.probes.liveness.enabled }}
          livenessProbe:
            exec:
              command:
              - python
              - -c
              - "import bmasterai; print('BMasterAI healthy')"
            initialDelaySeconds: {{ .Values.probes.liveness.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.liveness.periodSeconds }}
            timeoutSeconds: {{ .Values.probes.liveness.timeoutSeconds }}
            failureThreshold: {{ .Values.probes.liveness.failureThreshold }}
          {{- end }}
          {{- if .Values.probes.readiness.enabled }}
          readinessProbe:
            exec:
              command:
              - python
              - -c
              - "import bmasterai; print('BMasterAI ready')"
            initialDelaySeconds: {{ .Values.probes.readiness.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.readiness.periodSeconds }}
            timeoutSeconds: {{ .Values.probes.readiness.timeoutSeconds }}
            failureThreshold: {{ .Values.probes.readiness.failureThreshold }}
          {{- end }}
          {{- if .Values.probes.startup.enabled }}
          startupProbe:
            exec:
              command:
              - python
              - -c
              - "import bmasterai; print('BMasterAI starting')"
            initialDelaySeconds: {{ .Values.probes.startup.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.startup.periodSeconds }}
            timeoutSeconds: {{ .Values.probes.startup.timeoutSeconds }}
            failureThreshold: {{ .Values.probes.startup.failureThreshold }}
          {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          command:
            - python
            - -c
            - |
              import os
              import time
              import bmasterai
              from bmasterai.logging import configure_logging, LogLevel
              from bmasterai.monitoring import get_monitor
              
              # Configure logging
              logger = configure_logging(log_level=LogLevel.INFO)
              
              # Start monitoring
              monitor = get_monitor()
              monitor.start_monitoring()
              
              print(f"BMasterAI Agent started in pod {os.getenv('POD_NAME')}")
              
              # Keep the container running
              while True:
                  time.sleep(60)
                  print("BMasterAI Agent is running...")
      volumes:
        - name: config-volume
          configMap:
            name: {{ include "bmasterai.fullname" . }}-config
        {{- if .Values.persistence.data.enabled }}
        - name: data-volume
          persistentVolumeClaim:
            claimName: {{ include "bmasterai.fullname" . }}-data
        {{- end }}
        {{- if .Values.persistence.logs.enabled }}
        - name: logs-volume
          persistentVolumeClaim:
            claimName: {{ include "bmasterai.fullname" . }}-logs
        {{- end }}
        {{- with .Values.extraVolumes }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}